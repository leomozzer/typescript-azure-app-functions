trigger:
  paths:
    exclude:
    - .gitignore
    - .github/
    - README.md
    - LICENSE

variables:
  build_counter: $[counter('build-counter-$(RELEASE_NAME)', 1)]
  project_name: "typescript-app-functions"
  service_connection_name: "SC-AzureDevOps" 
  account_name: "cosmosappfunctions"
  resource_group_location: "eastus"
  storage_account_name: "stoappfunctions"
  runtime_version: 16

pool:
  vmImage: ubuntu-latest
  
stages:
  - stage: dev
    jobs:
    - job: cosmosdb
      displayName: Create CosmosDB
      steps:
      - template: ./templates/cosmosdb.yaml
        parameters:
          tags: '"DeployedUsing=Azure CLI"'
          resource_group_name: ${{ variables.project_name }}-rg
          account_name: ${{ variables.account_name }}
          service_connection_name: ${{ variables.service_connection_name }}
          resource_group_location: ${{ variables.resource_group_location }}

      - task: AzureCLI@2
        displayName: 'Create database and container'
        inputs:
          azureSubscription: ${{ variables.service_connection_name }}
          scriptType: 'bash'
          scriptLocation: inlineScript  
          inlineScript: |
            az cosmosdb sql database create -a ${{ variables.account_name }} -g ${{ variables.project_name }}-rg -n appointments
            az cosmosdb sql container create -a ${{ variables.account_name }} -g ${{ variables.project_name }}-rg -d appointments -n items --partition-key-path "/id" --throughput "1000"

    - job: tests
      dependsOn: cosmosdb
      condition: succeeded()
      displayName: Perform Tests
      steps:
      - task: AzureCLI@2
        displayName: 'Get cosmosdb secondaryMasterKey'
        name: cosmosdbkey
        inputs:
          azureSubscription: ${{ variables.service_connection_name }}
          scriptType: 'bash'
          scriptLocation: inlineScript  
          inlineScript: |
            cosmokey=$(az cosmosdb keys list -n ${{ variables.account_name }} -g ${{ variables.project_name }}-rg --query secondaryMasterKey --output tsv)
            echo "##vso[task.setvariable variable=COSMOSDB_KEY]${cosmokey}"
            echo "##vso[task.setvariable variable=COSMOSDB_KEY;isoutput=true]${cosmokey}"

      - script: |
          npm i
          npm test
        displayName: "npm test"
        env:
          COSMOSDB_NAME: ${{ variables.account_name }}
          COSMOSDB_KEY: $(COSMOSDB_KEY)

    - job: build
      dependsOn: tests
      condition: succeeded()
      variables:
          COSMOSDB_KEY: $[ dependencies.tests.outputs['cosmosdbkey.COSMOSDB_KEY'] ] 
      displayName: Deploy App Function
      steps:
      - bash: |
          echo $(COSMOSDB_KEY)

      - script: |
          npm i
          npm run build
          npm install --global azure-functions-core-tools@2
        displayName: "npm build"
        env:
          COSMOSDB_NAME: ${{ variables.account_name }}
          COSMOSDB_KEY: $(COSMOSDB_KEY)

      - task: AzureCLI@2
        displayName: 'Deploy App Function'
        inputs:
          azureSubscription: ${{ variables.service_connection_name }}
          scriptType: 'bash'
          scriptLocation: inlineScript  
          inlineScript: |
            az storage account create --name ${{ variables.storage_account_name }} --location ${{ variables.resource_group_location }} --resource-group ${{ variables.project_name }}-rg --sku Standard_LRS
            az functionapp create --resource-group ${{ variables.project_name }}-rg --consumption-plan-location ${{ variables.resource_group_location }} --runtime node --runtime-version ${{ variables.runtime_version }}  --functions-version 4 --name ${{ variables.project_name }} --storage-account ${{ variables.storage_account_name }}
            func azure functionapp publish ${{ variables.project_name }}
